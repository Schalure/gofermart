// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Schalure/gofermart/internal/gofermart (interfaces: OrderChecker)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/Schalure/gofermart/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderChecker is a mock of OrderChecker interface.
type MockOrderChecker struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCheckerMockRecorder
}

// MockOrderCheckerMockRecorder is the mock recorder for MockOrderChecker.
type MockOrderCheckerMockRecorder struct {
	mock *MockOrderChecker
}

// NewMockOrderChecker creates a new mock instance.
func NewMockOrderChecker(ctrl *gomock.Controller) *MockOrderChecker {
	mock := &MockOrderChecker{ctrl: ctrl}
	mock.recorder = &MockOrderCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderChecker) EXPECT() *MockOrderCheckerMockRecorder {
	return m.recorder
}

// OrderCheck mocks base method.
func (m *MockOrderChecker) OrderCheck(arg0 context.Context, arg1 string) (storage.Order, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderCheck", arg0, arg1)
	ret0, _ := ret[0].(storage.Order)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// OrderCheck indicates an expected call of OrderCheck.
func (mr *MockOrderCheckerMockRecorder) OrderCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderCheck", reflect.TypeOf((*MockOrderChecker)(nil).OrderCheck), arg0, arg1)
}
