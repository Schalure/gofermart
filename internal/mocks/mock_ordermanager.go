// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Schalure/gofermart/internal/server (interfaces: OrderManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	storage "github.com/Schalure/gofermart/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderManager is a mock of OrderManager interface.
type MockOrderManager struct {
	ctrl     *gomock.Controller
	recorder *MockOrderManagerMockRecorder
}

// MockOrderManagerMockRecorder is the mock recorder for MockOrderManager.
type MockOrderManagerMockRecorder struct {
	mock *MockOrderManager
}

// NewMockOrderManager creates a new mock instance.
func NewMockOrderManager(ctrl *gomock.Controller) *MockOrderManager {
	mock := &MockOrderManager{ctrl: ctrl}
	mock.recorder = &MockOrderManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderManager) EXPECT() *MockOrderManagerMockRecorder {
	return m.recorder
}

// GetOrders mocks base method.
func (m *MockOrderManager) GetOrders(arg0 string) ([]storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0)
	ret0, _ := ret[0].([]storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderManagerMockRecorder) GetOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderManager)(nil).GetOrders), arg0)
}

// LoadOrder mocks base method.
func (m *MockOrderManager) LoadOrder(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadOrder indicates an expected call of LoadOrder.
func (mr *MockOrderManagerMockRecorder) LoadOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrder", reflect.TypeOf((*MockOrderManager)(nil).LoadOrder), arg0, arg1)
}
